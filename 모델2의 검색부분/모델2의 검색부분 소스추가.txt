1.list.jsp의 페이징처리 뒷부분에 추가
<p>
		<!--검색어를 추가(자주 검색이 되는 항목을 잘 선택)
		  /JspBoard2/list.do ->기존의 ListAction에다가 검색부분을 추가(모델2)
		  /JspBoard2/search.do->새로운 액션클래스에서 검색부분을 추가(스프링)
		  ex) 글제목,작성자, 제목+본문=>상품관리(상품이름,제조사,,,)필드명
		-->
		<form name="test" action="/JspBoard2/list.do">
		  <select name="search">
		      <option value="subject">제목</option>
		      <option value="subject_content">제목+본문
		      <option value="writer">작성자</option>
		  </select>
		  <input type="text" size="15" name="searchtext">&nbsp;
		  <input type="submit" value="검색" >
		</form>
=============================================================
2.BoardDAO에 검색하는 메서드2개, 페이징 처리 메서드 1개 작성

//(1)게시판의 레코드수를 검색어에 따른 메서드 작성(검색분야,검색어)
	public int getArticleSearchCount(String search,String searchtext) {
		// 1.DB연결
				Connection con = null;
				PreparedStatement pstmt = null;
				ResultSet rs = null;
				int x = 0;
                 //추가
				String sql="";//저장시킬 SQL구문
				// 2.메서드 목적에 맞는 SQL구문
				try {
					con = pool.getConnection();
					System.out.println("con=>" + con);
					//---검색어를 입력하지 않은 경우(검색분야 선택)X------
			    if(search==null || search=="") {
					sql = "select count(*) from board";
			    }else { //검색분야(제목,작성자,제목+본문)->검색했다면
			    	if(search.equals("subject_content")) {
			    		sql="select count(*) from board  where subject like '%"
			    	            +searchtext+"%' or content like  '%"+searchtext+"%' ";
			    				
			    	}else { //제목 or 작성자->매개변수를 이용해서 하나의 sql통합
			    		sql="select count(*) from board  where "+search+" like '%"+searchtext+"%' ";
			    	   //sql="select count(*) from board  where writer like '%"+searchtext+"%' ";
			    	  // sql="select count(*) from board  where subject like '%"+searchtext+"%' ";
			    	}
			    }
			        System.out.println("getArticleSearchCount 검색어 sql=>"+sql);
					pstmt = con.prepareStatement(sql);
					rs = pstmt.executeQuery();
					// 추가
					if (rs.next()) { // 레코드갯수가 한개이상이라면
						x = rs.getInt(1);// 필드명이 없다->select ~from사이의 필드순서로 지정
						System.out.println("총레코드수(x)=>" + x);
					}
				} catch (Exception e) {
					System.out.println("getArticleSearchCount() 메서드 실행오류=>" + e);
				} finally {// 메모리해제
					pool.freeConnection(con, pstmt, rs);
				}
				return x;
	}
---------------------------------------------------------------------
//(2)검색어에 따른 레코드의 범위 지정에 대한 메서드 추가
	public List<BoardDTO> getBoardArticles(int start, int end,
			           String search,String searchtext) { // 1,10,11,10,20,10

		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;// select
		List<BoardDTO> articleList = null;// ArrayList articleList=null; //10개를 담을 객체선언
        //추가
		String sql="";
		// 2.메서드 목적에 맞는 SQL구문
		try {
			con = pool.getConnection();
			//--------------------------------------------------------------------
			if(search==null || search=="") {
			  sql = "select * from board order by ref desc,re_step asc limit ?,?";
			}else {//제목,작성자->검색범위에 있는것만 가장 최신의 글로 정렬~
				if(search.equals("subject_content")) {
		    		sql="select * from board  where subject like '%"
		    	            +searchtext+"%' or content like  '%"+searchtext
		    	            +"%'  order by ref desc,re_step asc limit ?,?";
		    				
		    	}else { //제목 or 작성자->매개변수를 이용해서 하나의 sql통합
		    		sql="select * from board  where "+search+" like '%"+searchtext
		    				+"%'  order by ref desc,re_step asc limit ?,?";
		    	}
			}
			System.out.println("getBoardArticles()의 sql=>"+sql);
			//----------------------------------------------------------------------
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, start - 1);// mysql이 내부적으로 레코드순번을 0부터 시작
			pstmt.setInt(2, end);
			rs = pstmt.executeQuery();
			// 추가->do~while->기존의 데이터는 그대로 유지=>신규글이 추가=>같이출력
			if (rs.next()) { // 레코드갯수가 한개라도 존재한다면
				articleList=new ArrayList(end);
                                     do { // 무조건 기존의 데이터 추가+새로추가
					BoardDTO article = new BoardDTO();// MemberDTO mem=new MemberDTO
					article.setNum(rs.getInt("num"));// 번호
					article.setWriter(rs.getString("writer"));// 작성자
					article.setEmail(rs.getString("email"));// 메일
					article.setSubject(rs.getString("subject"));
					article.setPasswd(rs.getString("passwd"));
					article.setReg_date(rs.getTimestamp("reg_date"));// 오늘날짜->코딩->now()
					// 추가
					article.setReadcount(rs.getInt("readcount"));// 조회수
					article.setRef(rs.getInt("ref"));// 그룹번호->답변다는 위치지정
					article.setRe_step(rs.getInt("re_step"));// 답변글 순서
					article.setRe_level(rs.getInt("re_level"));// 답변의 깊이(depth)
					article.setContent(rs.getString("content"));// 글내용
					article.setIp(rs.getString("ip"));// 글쓴이의 ip
					// 추가
					articleList.add(article);// 최종 웹상에서 필드별로 출력(Getter)
				} while (rs.next());
			} // if(rs.next()){}
		} catch (Exception e) {
			System.out.println("getBoardArticles() 메서드 실행오류=>" + e);
		} finally {// 메모리해제
			pool.freeConnection(con, pstmt, rs);
		}
		return articleList;
	}

-------------------------------------------------------------------
//(3)페이징 처리를 재조정해주는 메서드 작성(ListAction클래스 너무 복잡)
	//1.화면에 보여주는 페이지번호   2.화면에 출력할 레코드갯수
	public Hashtable pageList(String pageNum,int count) {
		
		//페이징 처리결과를 저장할 Hashtable 또는 HashMap객체를 선언
		Hashtable<String,Integer> pgList=new Hashtable<String,Integer>();
		//-----------ListAction부분의 페이징처리 계산부분을 복사(hashtable에 저장)---------------
		int pageSize=10;//int numPerPage->페이지당 보여주는 게시물수
	    int blockSize=10;//int pagePerBlock->블럭당 보여주는 페이지수
	    
	   //게시판을 맨 처음 실행시킬 경우 초기화 설정부분->1페이지(pageNum)
	   if(pageNum==null){//맨 처음에는 선택한 적이 없기때문에 null
		   pageNum="1";//1
	   }
	   //1.nowPage=>currentPage
	   int currentPage=Integer.parseInt(pageNum);//"1"->1	   
	   int startRow=(currentPage-1)*pageSize+1;
	   int endRow=currentPage*pageSize;
	   int number=0;//4.beginPerPage->페이지별로 맨 처음에 나오는 시작 게시물번호
	   number=count-(currentPage-1)*pageSize;
	   
	   System.out.println("현재 레코드수(count)=>"+count+",number=>"+number);
	   
	   //2.총페이지수,시작,종료페이지 계산
	     int pageCount=count/pageSize+(count%pageSize==0?0:1);
	      //2.시작페이지,끝페이지
	      int startPage=0;
	      //10의 배수인지 아닌지(경계선)
	      if(currentPage%blockSize!=0){//1~9,11~19,21~22
	           startPage=currentPage/blockSize*blockSize+1;
	      }else{ //10,20,30,40
	                            //((10/10)-1)*10+1=1
	           startPage=((currentPage/blockSize)-1)*blockSize+1;
	      }
	       int endPage=startPage+blockSize-1;//1+10-1=10
	       System.out.println("pgList메서드의 startPage="+startPage+",endPage="+endPage);
	       //블럭별로 구분해서 링크걸어서 출력
	       if(endPage > pageCount) 
	    	   endPage=pageCount;  //마지막페이지=총페이지수
	      //ListAction(pageNum,count)=>pgList()처리결과 ->ListAction->list.jsp
	       pgList.put("pageSize", pageSize);//<->pgList.get("pageSize")
	       pgList.put("blockSize", blockSize);
	       pgList.put("currentPage", currentPage);
	       pgList.put("startRow", startRow);
	       pgList.put("endRow", endRow);
	       pgList.put("count", count);
	       pgList.put("number", number);
	       pgList.put("startPage", startPage);
	       pgList.put("endPage", endPage);
	       pgList.put("pageCount", pageCount);
	       
		//------------------------
		return pgList; //ListAction-->list.jsp
	}
-------------------------------------------------------------------
3.ListAction클래스 소스코드 변경->search,searchtext

     
  WebContent->index.jsp(디폴트) or main.jsp
      |
       -board->list.jsp
      |    |
            -img
              js
              css
       -customer
      |
       -notice

//추가 pageNum,search(검색분야),searchtext(검색어)
		 String pageNum=request.getParameter("pageNum");
		 //추가
		 String search=request.getParameter("search"); 
		 String searchtext=request.getParameter("searchtext"); 
		
	       int count=0;//총레코드수
		   List<BoardDTO> articleList=null;//화면에 실제로 출력할 레코드객체
		   //총레코드수 구하기
		   BoardDAO dbPro=new BoardDAO();
		   //----------------------------------------------------------
		   count=dbPro.getArticleSearchCount(search,searchtext);
		   //-----------------------------------------------------------
		   System.out.println("현재 검색된수(count=>)"+count);
		   //추가2
		   Hashtable<String,Integer> pgList=dbPro.pageList(pageNum, count);
		   //6.검색된 레코드가 존재->articleList에 담기
		   if(count > 0){ //한개이상이라면    ------>endRow(X)
			   System.out.println(pgList.get("startRow")+","+pgList.get("endRow"));
			   articleList=dbPro.getBoardArticles(pgList.get("startRow"), 
					                                              pgList.get("pageSize"), //10
					                                              search,searchtext);
		   }else {
			   articleList=Collections.EMPTY_LIST;//아무것도 없다는 표시(정적상수)
		   }
		   
		  //처리결과->request객체에 저장
		   request.setAttribute("search", search);
		   request.setAttribute("searchtext", searchtext);
		   request.setAttribute("pgList", pgList);//페이징 처리 매개변수(10개)
		   request.setAttribute("articleList", articleList);
		   
		//3.정해진 view로 이동
		return "/list.jsp";  //  /board/list.jsp
=============================================================
4.list.jsp에서 el,jstl추가

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<%
   //Hashtable pgList=(Hashtable)request.getAttribute("pgList");
   //pgList.get("count")=>${pgList.count}
   //${search}, ${searchtext}
%>
<html>
<head>
<title>게시판</title>
<link href="style.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#e0ffff">
<center><b>글목록(전체 글:${pgList.count})</b>
<table width="700">
<tr>
    <td align="right" bgcolor="#b0e0e6">
    <a href="/JspBoard2/writeForm.do">글쓰기</a>
    </td>
</table>
<c:if test="${pgList.count==0}">
<table border="1" width="700" cellpadding="0" cellspacing="0" align="center">
 <tr>
    <td align="center">게시판에 저장된 글이 없습니다.</td>
 </tr>
</table>
</c:if>
<c:if test="${pgList.count > 0}">
<table border="1" width="700" cellpadding="0" cellspacing="0" align="center"> 
    <tr height="30" bgcolor="#b0e0e6"> 
      <td align="center"  width="50"  >번 호</td> 
      <td align="center"  width="250" >제   목</td> 
      <td align="center"  width="100" >작성자</td>
      <td align="center"  width="150" >작성일</td> 
      <td align="center"  width="50" >조 회</td> 
      <td align="center"  width="100" >IP</td>    
    </tr>
    <!-- 실질적으로 레코드 출력부분(태그(style(태그속성값을 부여)
       this-> 마우스를 갖다댄 tr객체 자신을 의미한다.
         태그객체명(tr).style.하위속성명=속성값
     -->
    <c:set var="number" value="${pgList.number}" />
    <c:forEach var="article"  items="${articleList}">
   <tr height="30" onmouseover="this.style.backgroundColor='white'"   
                            onmouseout="this.style.backgroundColor='#e0ffff'">
      <td align="center" width="50">
    <c:out value="${number}" />
    <c:set var="number" value="${number-1}" />
    </td>
    <td  width="250" >
	 <c:if test="${article.re_level > 0}">
	  <img src="images/level.gif" width="${7*article.re_level}" height="16">
	  <img src="images/re.gif">
	  </c:if>
	  <c:if test="${article.re_level ==0}">
	  <img src="images/level.gif" width="${7*article.re_level}" height="16">
	  </c:if>      
      <a href="/JspBoard2/content.do?num=${article.num}&pageNum=${pgList.currentPage}">
           ${article.subject}</a> 
           
          <c:if test="${article.readcount >=20}">
             <img src="images/hot.gif" border="0"  height="16"> 
         </c:if>
         </td>
    <td align="center"  width="100"> 
       <a href="mailto:${article.email}">${article.writer}</a></td>
    <td align="center"  width="150">
        <fmt:formatDate value="${article.reg_date}"
                timeStyle="medium"  pattern="yy.MM.dd (hh:mm)" />
    </td>
    <td align="center"  width="50">${article.readcount}</td>
    <td align="center" width="100" >${article.ip}</td>
  </tr>
       </c:forEach>
</table>
</c:if>
			<c:if test="${pgList.startPage>pgList.blockSize}">
				<a href="/JspBoard2/list.do?pageNum=${pgList.startPage-pgList.blockSize}&search=${search}&searchtext=${searchtext}">[이전]</a>
			</c:if>
			<c:forEach var="i" begin="${pgList.startPage}" end="${pgList.endPage}">
				<a href="/JspBoard2/list.do?pageNum=${i}&search=${search}&searchtext=${searchtext}">
				    <c:if test="${pgList.currentPage==i}">
				           <font color="red"><b>[${i}]</b></font>
				     </c:if>
				     <c:if test="${pgList.currentPage!=i}">
				           ${i}
				     </c:if>
				</a>
			</c:forEach>
			<c:if test="${pgList.endPage<pgList.pageCount}">
				<a href="/JspBoard2/list.do?pageNum=${pgList.startPage+pgList.blockSize}&search=${search}&searchtext=${searchtext}">[다음]</a>
			</c:if>
		<p>
		<!--검색어를 추가(자주 검색이 되는 항목을 잘 선택)
		  /JspBoard2/list.do ->기존의 ListAction에다가 검색부분을 추가(모델2)
		  /JspBoard2/search.do->새로운 액션클래스에서 검색부분을 추가(스프링)
		  ex) 글제목,작성자, 제목+본문=>상품관리(상품이름,제조사,,,)필드명
		-->
		<form name="test" action="/JspBoard2/list.do">
		  <select name="search">
		      <option value="subject">제목</option>
		      <option value="subject_content">제목+본문
		      <option value="writer">작성자</option>
		  </select>
		  <input type="text" size="15" name="searchtext">&nbsp;
		  <input type="submit" value="검색" >
		</form>
		<!--  -->
</center>
</body>
</html>

===================================================
총레코드수(x)=>14
현재 검색된수(count=>)14
현재 레코드수(count)=>14,number=>14
pgList메서드의 startPage=1,endPage=10
1,10
getBoardArticles()의 sql=>select * from board  where subject like '%%'  order by ref desc,re_step asc limit ?,?
view->/list.jsp
--------------------------------------------------------------
  ==>회원리스트+검색부분을 추가->MemberDAO에 추가

 ==>Ajax Programming



