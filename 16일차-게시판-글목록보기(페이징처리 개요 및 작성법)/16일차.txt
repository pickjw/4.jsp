16일차-게시판-글목록보기(페이징처리 개요 및 작성법)

***-----------------------------------------------
=>2/8일 (객관식 중간점검),팀프로젝트(팀원제출)
=>2/9일 팀확정,팀자리배치
***------------------------------------------------
->2/23일날(ncs)주관식(서술형)
===========================================================
회원관리->1.페이징 처리(계산식 암기X)->list.jsp=>회원리스트
                        ->MemberDAO(회원리스트 메서드 작성)
                        ->Login.jsp에서 링크->list.jsp
          ==================================================
          2.댓글다는 로직->코딩->화면에 결과를 출력

3.list.jsp=>**** 게시판에 사용되는 용어 9~10가지 용어 ****



**게시판* 
------------

    1) ref (reply family)->2.윗글(일반글)과답변글을묶어준다.=>그룹번호
                         ->서로 연관이 있는 글임과 동시에 트리구조를
                           형성 
                         =======================================
                           1.단독으로 사용하는 경우(ref 필드 하나만)
                           각각의 게시물을 구분하는 인자로 사용
                            (=num(게시물 번호와 기능이 같다)

   num   subject  writer   ref     ~
    1     aaaa     테스트   0
    2     bbbb     임시     1


    2) b_step(reply step)->몇번째단계의답변인지를나타내는컬럼 

                            ->같은그룹내에서도 답변글을 구분하기위해서
                            ->세로(y축) 

    3) b_level(reply level)=> 글의정렬순서를지정해주는 컬럼 
                               가로(x축) 
                              (들여쓰기) ->답변글이 증가될때 마다
                                           +1 증가
게시판에 글쓰기
------------------------>신규글일때 step,level->0
 
 게시판에 글쓰기->신규글->맨 처음에 쓴글 =>step,level->0

                ->답변글->기존에 있는 다른 사람의 게시물에 대해서

 1.신규글의 경우 =>insert into~

num     subject    ,,,      ref     step    level
 1       aaa                 0       0         0   =>신규글
 2       bbb       ,,,       1       0         0
 3       ccc       ,,,       2       0         0
 ,,,
===========================================================
 2.답변글의 경우 ->중간에 삽입되는 위치를 하나 만들어준다.

          update board set re_step=re_step+1 where ref=?
          and re_step > ?

          ->같은 그룹번호를 가지고 있으면서 나보다 step값이 클게시물을
            찾아서 step값을 하나 증가시켜라 (aaa-4)

                   나중에 삽입(insert)

num     subject    ,,,      ref     step    level

 1       aaa                 0       0         0 
          |
           -aaa-1            0       1        1 ->답변글이라는 의미
                |
                 -aaa-2      0       2        2
                                <-------------------
                  aaa-4      0       3         2
                |
                 -aaa-3      0       3->4      2

 2       bbb                  1      0         0
           |
            -bbb-1            1                 1
                   |
                    -bbb-2        1                 2

3       ccc                   2      0         0
           |
            -ccc-1            2                 1

4        ddd                  3       0          0
            |
             -ddd-1            3                  1


select * from board order by ref desc,re_step asc limit ?,?
                                           num

그룹번호는 내림차순으로 정렬하되 답변글 순서는 오름차순으로
 정렬하라 몇번째 레코드부터 몇개기준으로


** BoardDAO의 메서드 구현 **

//2)글목록보기에 대한 메서드구현(범위)
	//select * from board order by ref desc,re_step asc limit ?,?
	//1.레코드의 시작번호  2.웹상에 보여줄 레코드갯수
	public List getArticles(int start,int end) { //1,10,11,10,20,10
		
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;//select
		List articleList = null;// ArrayList articleList=null; //10개를 담을 객체선언
		
		//2.메서드 목적에 맞는 SQL구문
		try {
			con=pool.getConnection();
			//가장 최신의글을 내림차순으로 정렬하되 re_step값은 오름차순으로 정렬
			//(몇번째 레코드를 기준으로 몇개의 레코드 범위)
			String sql="select * from board order by ref desc,re_step asc limit ?,?";
			pstmt=con.prepareStatement(sql);
			pstmt.setInt(1, start-1);//mysql이 내부적으로 레코드순번을 0부터 시작
			pstmt.setInt(2, end);
			rs=pstmt.executeQuery();
			//추가->do~while->기존의 데이터는 그대로 유지=>신규글이 추가=>같이출력
			if(rs.next()) { //레코드갯수가 한개라도 존재한다면
				//articleList = new List();
				//articleList=new 자식클래명();
				articleList = new ArrayList(end);//초기생성값을 미리 부여end(크기 지정)
				do { //무조건 기존의 데이터 추가+새로추가
					BoardDTO article=new BoardDTO();//MemberDTO mem=new MemberDTO
					article.setNum(rs.getInt("num"));//번호
					article.setWriter(rs.getString("writer"));//작성자
					article.setEmail(rs.getString("email"));//메일
					article.setSubject(rs.getString("subject"));
					article.setPasswd(rs.getString("passwd"));
					article.setReg_date(rs.getTimestamp("reg_date"));//오늘날짜->코딩->now()
					//추가
					article.setReadcount(rs.getInt("readcount"));//조회수
					article.setRef(rs.getInt("ref"));//그룹번호->답변다는 위치지정
					article.setRe_step(rs.getInt("re_step"));//답변글 순서
					article.setRe_level(rs.getInt("re_level"));//답변의 깊이(depth)
					article.setContent(rs.getString("content"));//글내용
					article.setIp(rs.getString("ip"));//글쓴이의 ip
					//추가
					articleList.add(article);
				}while(rs.next());
			}//if(rs.next()){}
		}catch(Exception e) {
			System.out.println("getArticles() 메서드 실행오류=>"+e);
		}finally {//메모리해제
			pool.freeConnection(con, pstmt, rs);
		}
		return articleList;
	}
----------------------------------------------------------------------

----------------------------------------------------------------
테이블의 필드 3개 용어=>(ref,step,level)

1 record->레코드 10개가 모여서->1페이지 형성->10개 페이지=> (1 블럭)block
                                                              구역

*** 블럭의 종류 ***
                     1~10     11~20                                        21~30            
1.이전블럭=>이전 10개 11 12 13 14 15 16 17 18 19 20 다음블럭
                   ----------   현재 블럭

          =>최소한 현재페이지가 11페이지 이상

2.현재블럭  1 2 3 4 [5] 6 7 8 9 10 =>현재 보고 있는 영역(블럭)
                     현재 블럭     =>레코드가 1~100개인 경우

3.다음블럭 1 2 3 4 5 6 7 8 9 10 ::: 다음 10개? (11~20) (21~30)
                                     다음블럭

===============================================================
1. int nowPage=>현재 보고 있는 페이지(클릭해서)
2. int nowBlock=>현재블럭=>현재 페이지가 포함된 전체 페이지들(블럭)

3  int numPerPage = 10;  =>페이지당 보여주는 레코드수를 지정 
          10/1페이지
    =>1/10  
               
4. int pagePerBlock = 10; =>블럭당 보여주는 페이지수를 지정
     1 2 3 4 5 6 7 8 9 10 다음 10개

5.총페이지수=총레코드수/페이지당 보여주는 레코드수(numPerPage) 
                              122/10=12.2=(int)13.2=13

 12페이지 10개 2개->1 페이지를 더 생성->총 13페이지

    int totalPage =(int)Math.ceil((double)totalRecord / numPerPage);
                                      무조건 올림메서드

                        Math.round->반올림해주는 메서드

6. 총블럭수=총페이지수 /블럭당 보여주는 페이지수
    int totalBlock =(int)Math.ceil((double)totalPage / pagePerBlock);
	               13/10=1.3=1

**7. 페이지당 맨 처음에 보여주는 게시물 번호

                       현재페이지*페이지당 보여주는 레코드수
   int beginPerPage =   nowPage * numPerPage;
                      ex)   1*10=10,9,8,7,6
                            2*10=20,19,18,17,16,,
                            3*10=30,29,28,27,,,
                      =>가장 최근의 글이 맨 앞에 배치(desc)

 *** 1페이지의 첫번째 나오는 게시물번호=>총레코드수(122)
     2페이지->총레코드수-페이지당 보여주는 레코드수=>beginPerPage(112)
     3페이지->112-10=102
 **********************************************************************
=======================================================================
list.jsp 시작 ==>memberList.jsp(소스 코드 변경)
               
  1) MySQL의 mydb에서 member생성
                        
  create table member(     
 id varchar(20) primary key,  //회원id
 passwd varchar(20) not null, //not null(필수입력)
 name   varchar(20) not null, //회원명
 e_mail varchar(20) ,         //이메일
                               //이메일을 id대용으로
                               //설계 not null
 phone varchar(30)  not null, //전번
 zipcode varchar(10) ,        //우편번호 검색
 address varchar(60) not null,//주소
 job  varchar(30)             //직업
 );

 insert into member values('nup','1234','홍길동',
        'test@daum.net','02-123-0987','132-098',
        '서울시 강남구 대현빌딩 3층','프로그래머');

 commit;

  2)DBConnectionMgr->Mysql설정으로 변경
  3)WEB-INF
      lib=>Mysql드라이버를 복사
==========================================================











