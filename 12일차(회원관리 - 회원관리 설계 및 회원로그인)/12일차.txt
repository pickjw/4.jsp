12일차(회원관리 - 회원관리 설계 및 회원로그인)


 모델1->회원관리,답변형 게시판
 모델2->모델1의 답변형 게시판을 모델2로 변환
------------------------------------------------
 jQuery & Ajax & BootStrap(2~3주)
 Spring(3주)
 Angular & React (3주)
 프로젝트(2주)
-------------------------------------------------
jsp한 파일로 구성->에러잡기가 어렵다.=>디자인화면
                                       태그+자바코드

                 ->설계->중간에 추가코드->화면디자인상
                                          변화X
-----------------------------------------------------
~.java->~.class만->역컴파일(완벽->메서드로만 파악)
-----------------------------------------------------
**모델1방식 의 장점 및 단점**

장점

1. 적은규모(중소규모)의 사이트에 적합
2. 적은 인원으로 웹사이트 개발에 적합

단점
1.대규모의 (대기업규모) 사이트에 적합
  하지 않는다.
2.페이지가 많아지면 유지보수가 어렵다


***모델1 개발방식의 효율성***

1. jsp에서의 자바코드를 사용하지 않는다.
   =>주로 화면에 출력하는 코드위주로 작성한다.

2.DB연동과 관련된 테이블에 따른 자바빈즈를 따로 작성한다.

3.자바빈즈의 종류

  1) DB연결빈->DB연결및 연결해제기능
     =>중복된 코드들을 모아서 따로 클래스로 작성

   try{
         //1.JDBC Driver를 메모리에 로드(상위패키지명.하위패키지명...드라이버클래스명)
         Class.forName("oracle.jdbc.driver.OracleDriver");//mysql
         //2.Connection 객체 얻어오기
         con=DriverManager.getConnection(url, "test1", "t1234");
         out.println("con=>"+con);
          ,,,

  ***2)데이터저장빈->테이블에 데이터저장
                     및 조회기능(Setter,Getter)할때 필요
                     한 클래스

                   ->테이블의 필드와 연관
       DTO(Data Transfer Object)

      =>쇼핑몰->15~20개=>15개의 DTO가 필요

  ***3)비지니스 로직빈***->웹상에서 메서드호출
    =>DAO(Data Access Object)
    =>DB에 접속해서 웹상에서 호출하는 메서드를 선언
      및 구현해 놓은 클래스

    =>회원로그인 (인증),회원가입,회원수정,,,
    =>메서드로 구현

stmt=con.createStatement();//stmt->모두 인터페이스 객체로 구성
         sql="create table MyTest2(name varchar2(20),age number)";
         //구조변경->executeUpdate
         stmt.executeUpdate(sql);
         out.println("MyTest2 테이블 생성 OK!!!<br>");
         //4.insert->executeUpdate
         pstmt=con.prepareStatement("insert into MyTest2 values(?,?)");
         pstmt.setString(1,"Test1");
         pstmt.setInt(2,34);
         //1(sql구문이 성공적으로 실행이 되는 경우),0(sql구문이 실패한 경우)
         int insert=pstmt.executeUpdate();//pstmt.execute()
         out.println("insert(성공유무)=>"+insert+"<br>");
         //5.select=>테이블태그에 출력
         stmt2=con.createStatement();
         rs=stmt2.executeQuery("select * from MyTest2");
======================================================
1.DBConnectionMgr.java=>쉬운방법을 선택(300라인)

                      =>JNDI방법=>xml로 설정하는 방법

    1)오라클 서비스 가동시키기
  =>2)드라이버,url,계정명,암호를 설정한다.

  private String _driver = "oracle.jdbc.driver.OracleDriver",
    _url = "jdbc:oracle:thin:@localhost:1521:orcl",
    _user = "scott",
    _password = "tiger";

   ->3)lib->ojdbc6.jar 복사해 놓을것
-------------------------------------------------------------
2.회원테이블 생성->쇼핑몰기준

create table member(     
 id varchar2(20) primary key,
 passwd varchar2(20) not null,
 name   varchar2(20) not null,
 e_mail varchar2(20) ,
 phone varchar2(30)  not null,
 zipcode varchar2(10) ,
 address varchar2(60) not null,
 job  varchar2(30)
 );

 insert into member values('nup','1234','홍길동',
        'test@daum.net','02-123-0987','132-098',
        '서울시 강남구 대현빌딩 3층','프로그래머');

 commit;


3.테이블과 연관이 있는 MemberDTO를 작성

public class MemberDTO {

	// 멤버변수->웹상에서 입력받은 input type="text" name="이름"와 동일
	private String mem_id;
	private String mem_passwd;
	private String mem_name;
	private String mem_email;
	private String mem_phone;
	private String mem_zipcode;
	private String mem_address;
	private String mem_job;

	public String getMem_id() {
		return mem_id;
	}
        ,,,

4.업무를 분석해서 어떤 기능을 가진 메서드가 필요 분석

   MemberDAO


   //커넥션풀객체를 선언(정적 멤버변수로 선언)->공유
    private static DBConnectionMgr instance = null;

    public DBConnectionMgr() {} //private DBConnectionMgr(){}

    /** Use this method to set the maximum number of open connections before
     unused connections are closed.
     */
  
    //커넥션풀을 얻어오는 정적메소드
    public static DBConnectionMgr getInstance() {
        //커넥션풀이 생성이 안되어있다면
		if (instance == null) {
            synchronized (DBConnectionMgr.class) {
                //생성이 안되어있다면
				if (instance == null) {
					//객체생성
                    instance = new DBConnectionMgr();
                }
            }
        }
        return instance;//호출한 클래스쪽으로 반환
    }
    //Connection객체를 얻어와주는 메서드

   public synchronized Connection getConnection()
            throws Exception {
        if (!initialized) {
			//접속할 DB의 드라이버를 메모리에 로드
            Class c = Class.forName(_driver);
			//자동 등록(드라이버클래스)
            DriverManager.registerDriver((Driver) c.newInstance());

            initialized = true;//접속상태 
        }

    //SQL구문을 다 실행하고 나서 메모리 해제
   public void freeConnection(Connection c, PreparedStatement p, ResultSet r) {
        try {
            if (r != null) r.close();
            if (p != null) p.close();
            freeConnection(c);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
==========================================================================
 ->설계=>회원 로그인,로그아웃->과제) 중복id를 체크
                                      예제)
------------------------------------------------------
 거의 대부분->1.매개변수 O 반환형 O
              2.벤치마킹한 사이트->매개변수 O 반환형 O 확인이 가능
                                   입력받는 갯수를 확인
              3.SQL 구문을 작성
                SQL> select id,passwd from member where id='nup' and passwd='1234';

ID                   PASSWD
-------------------- --------------------
nup                  1234

//3.업무에 따른 어떤 기능을 가진 메서드를 작성?
	 //select * from member where id='nup' and passwd='1234';
	//1)회원로그인을 인증?->매개변수 갯수,자료형,반환형
	
	public boolean loginCheck(String id,String passwd) {
		//1.DB연결
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		boolean check=false;//회원인증 유무
		String sql="";//sql구문을 저장
		
		//2.메서드 목적에 맞는 SQL구문
		try {
			con=pool.getConnection();
			System.out.println("con=>"+con);
			sql="select id,passwd from member where id=? and passwd=?";
			pstmt=con.prepareStatement(sql);
			pstmt.setString(1, id);//웹상에서 입력한 id값
			pstmt.setString(2, passwd);
			rs=pstmt.executeQuery();
			check=rs.next();// 찾았으면 check=true or false
		}catch(Exception e) {
			System.out.println("loginCheck() 메서드 실행오류=>"+e);
		}finally {//메모리해제
			pool.freeConnection(con, pstmt, rs);
		}
		return check;
		
		//3.DB연결해제 메모리해제
	}
=================================================================
4.LoginProc.jsp파일

<jsp:useBean id="memMgr" class="hewon.MemberDAO" />
<%
    //id,passwd를 받아서 인증 성공->LoginSuccess.jsp or LogError.jsp
    String mem_id=request.getParameter("mem_id");
    String mem_passwd=request.getParameter("mem_passwd");
    System.out.println("mem_id=>"+mem_id+",mem_passwd=>"+mem_passwd);
    //loginCheck()
    //MemberDAO memMgr=new MemberDAO();
    boolean check=memMgr.loginCheck(mem_id, mem_passwd);
%>
<%
    if(check){//인증성공
    	session.setAttribute("idKey",mem_id);//키값 idKey,계정값
    	response.sendRedirect("LoginSuccess.jsp");//My Page
    }else{// false 인증실패인 경우
    	response.sendRedirect("LogError.jsp");
    }
%>

5.LoginSuccess.jsp

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<%
   //회원인 사람만 보여주는 페이지->세션->session.setAttribute("idKey",mem_id);
   String mem_id=(String)session.getAttribute("idKey");
   System.out.println("mem_id=>"+mem_id);
%>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>My Page(인증 페이지)</title>
</head>
<body bgcolor="#FFFFCC">
   <center>
       <%
           if(mem_id!=null){ //인증된 계정을 가진 사람이라면 
        %>
        	   <b><%=mem_id%></b>님 환영합니다. <p>
        	   <%-- <%=memMgr.getPoint() %> 마일리지 값 출력--%>
        	   당신은 제한된 기능을 사용할 수 가 있습니다.<p>
          <a href="Logout.jsp">로그아웃</a>	   
       <%   } %>
   </center>
</body>
</html>
---------------------------------------------------------------------
6.Logout.jsp파일

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%
     //세션연결상태->로그아웃->메모리해제
     session.invalidate();
%>
<script>
     alert("정상적으로 로그아웃되었습니다.!!!")
     location.href="Login.jsp"
</script>
---------------------------------------------------------------------
** Tip **

Login.jsp(로그인 하기전 테이블태그)
LoginSuccess.jsp(로그인 인증후 보여주는 페이지)
     |
 Login.jsp(로그인전과 후로 화면디자인 가능하다.)=>세션처리를 이용

 scott/tiger로 로그인

CREATE TABLE zipcode (
	zipcode             char(7)              NOT NULL  ,
	area1               char(10)             NULL      ,
	area2               char(20)             NULL      ,
	area3               char(40)             NULL      ,
	area4               char(20)             NULL      
);
=>테이블 생성

zipcode.txt파일

sql>@C:\webtest\2.db\zipcode.txt


~
commit;
========================================

TNAME                          TABTYPE  CLUSTERID
------------------------------ ------- ----------
ZIPCODE                        TABLE

34 개의 행이 선택되었습니다.

SQL> select count(*) from zipcode;

  COUNT(*)
----------
     42619

SQL> desc zipcode;
 이름                                      널?      유형
 ----------------------------------------- -------- --------------

 ZIPCODE                                   NOT NULL CHAR(7)
 AREA1                                              CHAR(10)
 AREA2                                              CHAR(20)
 AREA3                                              CHAR(40)
 AREA4                                              CHAR(20)

7.우편번호 검색을 위한 DTO 생성=>ZipcodeDTO
==============================================
  중복id 체크 과제풀이

  1)MemberDAO에서 checkId()작성
  2)Register.jsp에서 checkid()자바스크립트 함수에서
    =>IdCheck.jsp?mem_id="+id =>열리고자하는 창
  3)IdCheck.jsp를 작성->LoginProc.jsp와 소스코드가 유사
==========================================================

  우편번호 검색
  회원가입
------------------------
  회원수정,회원탈퇴,회원가입 약관 처리
  



 