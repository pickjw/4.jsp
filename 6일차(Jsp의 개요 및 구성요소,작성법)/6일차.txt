6일차(JSP의 개요 및 구성요소,작성법)

Web Programming->서버
======================
개발환경 구축->웹사이트를 개발->JSP를 가지고 사이트작성

1.JDK설치->path설정
2.웹서버를 설치->무료(Tomcat 8.x 서버설치)->8089
-------------------------------------------------
3.웹컨텍스트=웹어플리케이션=웹프로젝트 작성

 JspStudy3 작성
---------------
    |
     -src->자바파일만 저장,서블릿
    |
     -WebContent(=>최상위 디렉토리)->html,css,js,~.jsp
                   index.jsp(default) or main.jsp
                   hello.jsp파일(Java Server Page)(1)
           |
            -abc->imsi.jsp작성(2)
                  test.jsp작성(3)->표현식2
           |
            -control->comment.jsp(4)
                      array.jsp(5)
          |
           -images
          |
           -css
          |
           -js
          |
           -WEB-INF->web.xml(환경설정파일)
               |
                -lib->외부의 패키지에 관련된 자바파일
                      을 불러올때 사용
                    =>ojdbc6.jar,cos.jar
=====================================================
 ** 서블릿=>웹상에서 실행이 되는 자바 프로그램
         (브라우저상)=>톰캣서버에서 실행이 되어서
                       그 결과를 html문서에 담아서
                       브라우저로 전송해서 보여주는
                       프로그램

    =>자바언어(70~80%)+html5,css,js(20%)
    ==>JSP(html5,css,js(80%)+최소한의 자바코드를 포함
                             (20%)
       모델1
    ==>규모가 큰 프로젝트=>서블릿(모델2)->스프링(모델2 응용)



   Servlet=>Server Side Applet

    애플릿==>웹상에서 실행이 되는 자바 프로그램
             (클라이언트에서 실행이 되는 프로그램)
    =>X
=======================================================
화면 디자인 설계=>html or jsp파일

1.html->순수 화면 디자인만 하는경우=>자바코드 사용X
2.jsp=>순수 화면 디자인+자바코드를 사용함으로써 프로그램작성
                                     가능
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

   page 지시어+html문서로 구성된 파일


http://localhost:8090/JspStudy3/hello.jsp
------------------------------------------
http://192.168.0.57:8090/JspStudy3/hello.jsp

프로토콜명://도메인 이름:8090(포트번호)/프로젝트명/요청문서명
               ip주소                       WebContent

=>외부에서 내가 만든 홈페이지에 접속하는 경로=>요청경로

**웹 서버(Web Server)=>톰캣서버

클라이언트의 요청을 받아서 처리한 후 결과를 클라이언트에 전송해 주는 주체
                                                 (html문서)

**웹 클라이언트(Web Client)

필요한 데이터를 웹 서버에 요청하는 주체(컴퓨터)
  (hello.jsp)
--------------------------------------------------

웹 브라우저(Web Browser)

웹 서버로부터 받은 HTML 문서를 해석하고 보여주는 애플리케이션


 ***웹페이지를 요청(request)-------------------->서버로 전송
    링크문자열 클릭,버튼클릭,url입력하고 enter

                 html문서 재전송<---------------응답(response)

****JSP 구성요소 4가지*****

1.변수선언,제어문을 사용->Scriptlet(스크립트릿)
  
  스크립트릿->웹상에서 자바코드를 사용할 수 있도록 해주는 영역
                  <% ~  %> =>태그사용X(자바스크립트 구문도 사용 X)
                                         표현식도 사용불가

<%
  변수선언(지역변수),제어문을 사용
%>

2.Expression(표현식)->간단하게 출력문 대용으로 사용
                     ->out.println(출력할변수,문장)구문 대신
                       -------------------------------------
                     목적-> 변수값 출력,메서드호출->결과값을 출력

 형식) <%=출력할 변수명%> or <%=객체명.일반메서드명(~)%>
                                     <%=정적메서드명(~)%>

  **표현식을 사용할때 주의할점**

  1)<%=출력할 변수명%>   <% 문장   %>와 문장과 혼동X 구분할것
  2)<%=객체명.일반메서드명(~);%>  =>표현식끝에 ;을 쓰면 안된다.

3.선언문(Declaration)->스크립트릿과 모양이 유사하다.
                     ->주로 변수선언할때(정적 멤버변수 느낌)

형식) <%!  자바코드(변수사용),메서드 사용이 가능 %>

<%!  ~ %> =>자바코드를 사용이 가능(정적 멤버변수 선언)
           ->***선언된 위치에 상관없이 변수를 불러다 사용 가능**
           ->메서드 작성이 가능->정적메서드 느낌
           ->***사용이 가능한데 현실적으로 사용X =>메서드를 사용X

 <%!
      String name="홍길동";
      
      public String getName(){ ===>따로 클래스를 만들어서 사용(자바빈즈)
    	  return name;                  DTO(Data Transfer Object)
                                                      DAO(Data Access Object)
      }
%>
****************************************************************
jsp페이지 내부에서 따로 메서드를 선언해서 호출하는 구문을 잘 사용X

 디자이너(html5,css,js)+소스코드(메서드 작성)=>화면이 복잡

=>메서드부분-->따로 클래스로 만들어서 웹에서 불러오는 경우
                         자바빈즈클래스에서 작업을 한다.->액션태그
*******************************************************************
***4.주석(comment) or 지시어***

   comment.jsp

JSP 주석->태그와 태그사이에 적절히 배치

1.<!-- 눈에 보이는 주석 --> =>html주석 
2.<%-- 눈에 안보이는 주석 --%>  ====>클라이언트에게 전송한
                                      html문서내부에는 포함X

3.자바주석-> //, /*  ~ */  =>한줄주석,여러줄 주석

*** 주석을 사용할 시 주의할점 ****

1.주석내부에 표현식을 사용이 가능하다.
2.주석내부에 있는 표현식에 자바주석을 사용할 수 있다.
3.주석내부의 표현식을 잘못 사용하시면 에러가 유발 =>화면캡처 그림 확인
===================================================

 404 에러코드==>경로가 틀렸거나 파일명이 틀린경우 발생한 에러메세지
 500 에러코드==>자바코드를 잘못 사용한 경우

HTTP Status 500 – Internal Server Error =>에러코드 번호
Type Exception Report

Message Unable to compile class for JSP:

Description The server encountered an unexpected condition that prevented it from fulfilling the request.

Exception

org.apache.jasper.JasperException: Unable to compile class for JSP: 

====>에러페이지의 라인번호를 보고 에러를 찾는 경우(==>대부분 오타)

An error occurred at line: [7] in the jsp file: [/control/comment.jsp]
Syntax error on token ";", ( expected
4: <html>
5: <head>
<!-- 눈에 보이는 주석  -->
<%--  눈에 보이지 않은 주석 --%>

<!-- 8+5=<%8+5/* 표현식내부에 자바주석사용 가능  */%>-->
<%-- 8+5=<%=8+5/*   */%> --%>

============================================================
 웹프로그래밍 방법

 요청을 하는 쪽(클라이언트)-------------->imsi.jsp
                ~.jsp or ~.html
-----------------------------------------------------------

 로그인->폼(id,passwd)---->~.jsp  

 사용자로부터 값을 입력->프로그램

     input.jsp(디자인)--------->iftest.jsp(처리)

http://localhost:8090/JspStudy3/control/iftest.jsp?name='홍길동'&color=red

전송버튼을 클릭=>get방식

control/iftest.jsp?name='홍길동'&color=red
        ===========
        요청을 받아서 처리해주는 페이지?매개변수명=전달할값&매개변수2=값&~
        (=응답페이지)


***전의 페이지로 이동** <---

 history.back() = history.go(-1)와 동일하다.

<input type="button" value="이전 페이지" onclick="history.back()">
********************************************************************
   control
      |
       -input2.jsp->while.jsp(제어문 while문을 이용)
====================================================

 반복할 문자열? a
 반복할 숫자?  4

 aaaa

----------------------------------------------------------------------
<과제>풀이

예습->서블릿의 개요,서블릿을 작성하는 방법, 구성요소? doGet(),doPost()?
      2,3장 예습
=======================================================================








